/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package net.thrift.test;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-31")
public class Calculator
{

	/**
	 * 啊哈，我们现在到了最Cool的环节，即定义服务。
	 * （一个服务可以使用extends来继承另一个服务。）
	 */
	public interface Iface extends net.thrift.shared.SharedService.Iface
	{

		/**
		 * 服务中方法的定义非常类似于C语言的语法。它会包括一个返回值，
		 * 一个参数列表以及一个可以抛出的异常列表（可选）
		 * 可以提前告诉大家的是，定义参数列表的方法、定义异常列表的方法，
		 * 和定义结构体的方法都是相似的，可以从下面的例子中看出。
		 * 除了最后一个方法，其他的方法最后都要有一个逗号，大家可不要忽略这个细节。
		 */
		public void Ping() throws org.apache.thrift.TException;

		public int Add(int num1, int num2) throws org.apache.thrift.TException;

		/**
		 * 在异常列表前，需要加throws关键字。
		 *
		 * @param logid
		 * @param w
		 */
		public int Calculate(int logid, Work w) throws InvalidOperation, org.apache.thrift.TException;

		/**
		 * 如下的这个方法有一个oneway修饰符，还记得他的作用么
		 * 这表示这个方法在调用后会立即返回，不会等待远端的回复。
		 * 要注意的是，oneway只能修饰void返回类型。
		 * oneway在英语里就是“单向”的意思，还是很形象滴。
		 */
		public void Zip() throws org.apache.thrift.TException;

	}

	public interface AsyncIface extends net.thrift.shared.SharedService.AsyncIface
	{

		public void Ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

		public void Add(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

		public void Calculate(int logid, Work w, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

		public void Zip(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends net.thrift.shared.SharedService.Client implements Iface
	{
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client>
		{
			public Factory()
			{
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot)
			{
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
			{
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot)
		{
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
		{
			super(iprot, oprot);
		}

		public void Ping() throws org.apache.thrift.TException
		{
			send_Ping();
			recv_Ping();
		}

		public void send_Ping() throws org.apache.thrift.TException
		{
			Ping_args args = new Ping_args();
			sendBase("Ping", args);
		}

		public void recv_Ping() throws org.apache.thrift.TException
		{
			Ping_result result = new Ping_result();
			receiveBase(result, "Ping");
			return;
		}

		public int Add(int num1, int num2) throws org.apache.thrift.TException
		{
			send_Add(num1, num2);
			return recv_Add();
		}

		public void send_Add(int num1, int num2) throws org.apache.thrift.TException
		{
			Add_args args = new Add_args();
			args.setNum1(num1);
			args.setNum2(num2);
			sendBase("Add", args);
		}

		public int recv_Add() throws org.apache.thrift.TException
		{
			Add_result result = new Add_result();
			receiveBase(result, "Add");
			if (result.isSetSuccess())
			{
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Add failed: unknown result");
		}

		public int Calculate(int logid, Work w) throws InvalidOperation, org.apache.thrift.TException
		{
			send_Calculate(logid, w);
			return recv_Calculate();
		}

		public void send_Calculate(int logid, Work w) throws org.apache.thrift.TException
		{
			Calculate_args args = new Calculate_args();
			args.setLogid(logid);
			args.setW(w);
			sendBase("Calculate", args);
		}

		public int recv_Calculate() throws InvalidOperation, org.apache.thrift.TException
		{
			Calculate_result result = new Calculate_result();
			receiveBase(result, "Calculate");
			if (result.isSetSuccess())
			{
				return result.success;
			}
			if (result.ouch != null)
			{
				throw result.ouch;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Calculate failed: unknown result");
		}

		public void Zip() throws org.apache.thrift.TException
		{
			send_Zip();
		}

		public void send_Zip() throws org.apache.thrift.TException
		{
			Zip_args args = new Zip_args();
			sendBaseOneway("Zip", args);
		}

	}

	public static class AsyncClient extends net.thrift.shared.SharedService.AsyncClient implements AsyncIface
	{
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient>
		{
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory)
			{
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport)
			{
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport)
		{
			super(protocolFactory, clientManager, transport);
		}

		public void Ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException
		{
			checkReady();
			Ping_call method_call = new Ping_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void>
		{
			public Ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
				Ping_args args = new Ping_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

		public void Add(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException
		{
			checkReady();
			Add_call method_call = new Add_call(num1, num2, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Add_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer>
		{
			private int num1;
			private int num2;

			public Add_call(int num1, int num2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
				this.num1 = num1;
				this.num2 = num2;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Add", org.apache.thrift.protocol.TMessageType.CALL, 0));
				Add_args args = new Add_args();
				args.setNum1(num1);
				args.setNum2(num2);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Integer getResult() throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_Add();
			}
		}

		public void Calculate(int logid, Work w, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException
		{
			checkReady();
			Calculate_call method_call = new Calculate_call(logid, w, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Calculate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer>
		{
			private int logid;
			private Work w;

			public Calculate_call(int logid, Work w, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, false);
				this.logid = logid;
				this.w = w;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Calculate", org.apache.thrift.protocol.TMessageType.CALL, 0));
				Calculate_args args = new Calculate_args();
				args.setLogid(logid);
				args.setW(w);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Integer getResult() throws InvalidOperation, org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_Calculate();
			}
		}

		public void Zip(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException
		{
			checkReady();
			Zip_call method_call = new Zip_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Zip_call extends org.apache.thrift.async.TAsyncMethodCall<Void>
		{
			public Zip_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException
			{
				super(client, protocolFactory, transport, resultHandler, true);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException
			{
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Zip", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
				Zip_args args = new Zip_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException
			{
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
				{
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

	}

	public static class Processor<I extends Iface> extends net.thrift.shared.SharedService.Processor<I> implements org.apache.thrift.TProcessor
	{
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface)
		{
			super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
		{
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
		{
			processMap.put("Ping", new Ping());
			processMap.put("Add", new Add());
			processMap.put("Calculate", new Calculate());
			processMap.put("Zip", new Zip());
			return processMap;
		}

		public static class Ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Ping_args>
		{
			public Ping()
			{
				super("Ping");
			}

			public Ping_args getEmptyArgsInstance()
			{
				return new Ping_args();
			}

			protected boolean isOneway()
			{
				return false;
			}

			public Ping_result getResult(I iface, Ping_args args) throws org.apache.thrift.TException
			{
				Ping_result result = new Ping_result();
				iface.Ping();
				return result;
			}
		}

		public static class Add<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Add_args>
		{
			public Add()
			{
				super("Add");
			}

			public Add_args getEmptyArgsInstance()
			{
				return new Add_args();
			}

			protected boolean isOneway()
			{
				return false;
			}

			public Add_result getResult(I iface, Add_args args) throws org.apache.thrift.TException
			{
				Add_result result = new Add_result();
				result.success = iface.Add(args.num1, args.num2);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class Calculate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Calculate_args>
		{
			public Calculate()
			{
				super("Calculate");
			}

			public Calculate_args getEmptyArgsInstance()
			{
				return new Calculate_args();
			}

			protected boolean isOneway()
			{
				return false;
			}

			public Calculate_result getResult(I iface, Calculate_args args) throws org.apache.thrift.TException
			{
				Calculate_result result = new Calculate_result();
				try
				{
					result.success = iface.Calculate(args.logid, args.w);
					result.setSuccessIsSet(true);
				}
				catch (InvalidOperation ouch)
				{
					result.ouch = ouch;
				}
				return result;
			}
		}

		public static class Zip<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Zip_args>
		{
			public Zip()
			{
				super("Zip");
			}

			public Zip_args getEmptyArgsInstance()
			{
				return new Zip_args();
			}

			protected boolean isOneway()
			{
				return true;
			}

			public org.apache.thrift.TBase getResult(I iface, Zip_args args) throws org.apache.thrift.TException
			{
				iface.Zip();
				return null;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends net.thrift.shared.SharedService.AsyncProcessor<I>
	{
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface)
		{
			super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap)
		{
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap)
		{
			processMap.put("Ping", new Ping());
			processMap.put("Add", new Add());
			processMap.put("Calculate", new Calculate());
			processMap.put("Zip", new Zip());
			return processMap;
		}

		public static class Ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Ping_args, Void>
		{
			public Ping()
			{
				super("Ping");
			}

			public Ping_args getEmptyArgsInstance()
			{
				return new Ping_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
			{
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>()
				{
					public void onComplete(Void o)
					{
						Ping_result result = new Ping_result();
						try
						{
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e)
						{
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e)
						{
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e)
					{
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						Ping_result result = new Ping_result();
						if (e instanceof org.apache.thrift.transport.TTransportException)
						{
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException)
						{
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else
						{
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try
						{
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex)
						{
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway()
			{
				return false;
			}

			public void start(I iface, Ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException
			{
				iface.Ping(resultHandler);
			}
		}

		public static class Add<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Add_args, java.lang.Integer>
		{
			public Add()
			{
				super("Add");
			}

			public Add_args getEmptyArgsInstance()
			{
				return new Add_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
			{
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>()
				{
					public void onComplete(java.lang.Integer o)
					{
						Add_result result = new Add_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try
						{
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e)
						{
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e)
						{
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e)
					{
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						Add_result result = new Add_result();
						if (e instanceof org.apache.thrift.transport.TTransportException)
						{
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException)
						{
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else
						{
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try
						{
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex)
						{
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway()
			{
				return false;
			}

			public void start(I iface, Add_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException
			{
				iface.Add(args.num1, args.num2, resultHandler);
			}
		}

		public static class Calculate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Calculate_args, java.lang.Integer>
		{
			public Calculate()
			{
				super("Calculate");
			}

			public Calculate_args getEmptyArgsInstance()
			{
				return new Calculate_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
			{
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>()
				{
					public void onComplete(java.lang.Integer o)
					{
						Calculate_result result = new Calculate_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try
						{
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e)
						{
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e)
						{
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e)
					{
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						Calculate_result result = new Calculate_result();
						if (e instanceof InvalidOperation)
						{
							result.ouch = (InvalidOperation) e;
							result.setOuchIsSet(true);
							msg = result;
						} else if (e instanceof org.apache.thrift.transport.TTransportException)
						{
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException)
						{
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else
						{
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try
						{
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex)
						{
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway()
			{
				return false;
			}

			public void start(I iface, Calculate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException
			{
				iface.Calculate(args.logid, args.w, resultHandler);
			}
		}

		public static class Zip<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Zip_args, Void>
		{
			public Zip()
			{
				super("Zip");
			}

			public Zip_args getEmptyArgsInstance()
			{
				return new Zip_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid)
			{
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>()
				{
					public void onComplete(Void o)
					{
					}

					public void onError(java.lang.Exception e)
					{
						if (e instanceof org.apache.thrift.transport.TTransportException)
						{
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
						} else
						{
							_LOGGER.error("Exception inside oneway handler", e);
						}
					}
				};
			}

			protected boolean isOneway()
			{
				return true;
			}

			public void start(I iface, Zip_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException
			{
				iface.Zip(resultHandler);
			}
		}

	}

	public static class Ping_args implements org.apache.thrift.TBase<Ping_args, Ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_args>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_args");


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Ping_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Ping_argsTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static
			{
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public java.lang.String getFieldName()
			{
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static
		{
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_args.class, metaDataMap);
		}

		public Ping_args()
		{
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Ping_args(Ping_args other)
		{
		}

		public Ping_args deepCopy()
		{
			return new Ping_args(this);
		}

		@Override
		public void clear()
		{
		}

		public void setFieldValue(_Fields field, java.lang.Object value)
		{
			switch (field)
			{
			}
		}

		public java.lang.Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new java.lang.IllegalArgumentException();
			}

			switch (field)
			{
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that)
		{
			if (that == null)
				return false;
			if (that instanceof Ping_args)
				return this.equals((Ping_args) that);
			return false;
		}

		public boolean equals(Ping_args that)
		{
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode()
		{
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(Ping_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
		{
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
		{
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString()
		{
			java.lang.StringBuilder sb = new java.lang.StringBuilder("Ping_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class Ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Ping_argsStandardScheme getScheme()
			{
				return new Ping_argsStandardScheme();
			}
		}

		private static class Ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Ping_args>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_args struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Ping_argsTupleScheme getScheme()
			{
				return new Ping_argsTupleScheme();
			}
		}

		private static class Ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Ping_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
		{
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class Ping_result implements org.apache.thrift.TBase<Ping_result, Ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_result>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_result");


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Ping_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Ping_resultTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static
			{
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public java.lang.String getFieldName()
			{
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static
		{
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_result.class, metaDataMap);
		}

		public Ping_result()
		{
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Ping_result(Ping_result other)
		{
		}

		public Ping_result deepCopy()
		{
			return new Ping_result(this);
		}

		@Override
		public void clear()
		{
		}

		public void setFieldValue(_Fields field, java.lang.Object value)
		{
			switch (field)
			{
			}
		}

		public java.lang.Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new java.lang.IllegalArgumentException();
			}

			switch (field)
			{
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that)
		{
			if (that == null)
				return false;
			if (that instanceof Ping_result)
				return this.equals((Ping_result) that);
			return false;
		}

		public boolean equals(Ping_result that)
		{
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode()
		{
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(Ping_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
		{
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
		{
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString()
		{
			java.lang.StringBuilder sb = new java.lang.StringBuilder("Ping_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class Ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Ping_resultStandardScheme getScheme()
			{
				return new Ping_resultStandardScheme();
			}
		}

		private static class Ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Ping_result>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_result struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Ping_resultTupleScheme getScheme()
			{
				return new Ping_resultTupleScheme();
			}
		}

		private static class Ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Ping_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
		{
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class Add_args implements org.apache.thrift.TBase<Add_args, Add_args._Fields>, java.io.Serializable, Cloneable, Comparable<Add_args>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Add_args");

		private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField NUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("num2", org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Add_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Add_argsTupleSchemeFactory();

		public int num1; // required
		public int num2; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			NUM1((short) 1, "num1"),
			NUM2((short) 2, "num2");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static
			{
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					case 1: // NUM1
						return NUM1;
					case 2: // NUM2
						return NUM2;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public java.lang.String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __NUM1_ISSET_ID = 0;
		private static final int __NUM2_ISSET_ID = 1;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static
		{
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
			tmpMap.put(_Fields.NUM2, new org.apache.thrift.meta_data.FieldMetaData("num2", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Add_args.class, metaDataMap);
		}

		public Add_args()
		{
		}

		public Add_args(
			int num1,
			int num2)
		{
			this();
			this.num1 = num1;
			setNum1IsSet(true);
			this.num2 = num2;
			setNum2IsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Add_args(Add_args other)
		{
			__isset_bitfield = other.__isset_bitfield;
			this.num1 = other.num1;
			this.num2 = other.num2;
		}

		public Add_args deepCopy()
		{
			return new Add_args(this);
		}

		@Override
		public void clear()
		{
			setNum1IsSet(false);
			this.num1 = 0;
			setNum2IsSet(false);
			this.num2 = 0;
		}

		public int getNum1()
		{
			return this.num1;
		}

		public Add_args setNum1(int num1)
		{
			this.num1 = num1;
			setNum1IsSet(true);
			return this;
		}

		public void unsetNum1()
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
		}

		/** Returns true if field num1 is set (has been assigned a value) and false otherwise */
		public boolean isSetNum1()
		{
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
		}

		public void setNum1IsSet(boolean value)
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
		}

		public int getNum2()
		{
			return this.num2;
		}

		public Add_args setNum2(int num2)
		{
			this.num2 = num2;
			setNum2IsSet(true);
			return this;
		}

		public void unsetNum2()
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
		}

		/** Returns true if field num2 is set (has been assigned a value) and false otherwise */
		public boolean isSetNum2()
		{
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
		}

		public void setNum2IsSet(boolean value)
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value)
		{
			switch (field)
			{
				case NUM1:
					if (value == null)
					{
						unsetNum1();
					} else
					{
						setNum1((java.lang.Integer) value);
					}
					break;

				case NUM2:
					if (value == null)
					{
						unsetNum2();
					} else
					{
						setNum2((java.lang.Integer) value);
					}
					break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field)
		{
			switch (field)
			{
				case NUM1:
					return getNum1();

				case NUM2:
					return getNum2();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new java.lang.IllegalArgumentException();
			}

			switch (field)
			{
				case NUM1:
					return isSetNum1();
				case NUM2:
					return isSetNum2();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that)
		{
			if (that == null)
				return false;
			if (that instanceof Add_args)
				return this.equals((Add_args) that);
			return false;
		}

		public boolean equals(Add_args that)
		{
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_num1 = true;
			boolean that_present_num1 = true;
			if (this_present_num1 || that_present_num1)
			{
				if (!(this_present_num1 && that_present_num1))
					return false;
				if (this.num1 != that.num1)
					return false;
			}

			boolean this_present_num2 = true;
			boolean that_present_num2 = true;
			if (this_present_num2 || that_present_num2)
			{
				if (!(this_present_num2 && that_present_num2))
					return false;
				if (this.num2 != that.num2)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			int hashCode = 1;

			hashCode = hashCode * 8191 + num1;

			hashCode = hashCode * 8191 + num2;

			return hashCode;
		}

		@Override
		public int compareTo(Add_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetNum1())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetNum2())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, other.num2);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
		{
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
		{
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString()
		{
			java.lang.StringBuilder sb = new java.lang.StringBuilder("Add_args(");
			boolean first = true;

			sb.append("num1:");
			sb.append(this.num1);
			first = false;
			if (!first) sb.append(", ");
			sb.append("num2:");
			sb.append(this.num2);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
		{
			try
			{
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class Add_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Add_argsStandardScheme getScheme()
			{
				return new Add_argsStandardScheme();
			}
		}

		private static class Add_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Add_args>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot, Add_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						case 1: // NUM1
							if (schemeField.type == org.apache.thrift.protocol.TType.I32)
							{
								struct.num1 = iprot.readI32();
								struct.setNum1IsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // NUM2
							if (schemeField.type == org.apache.thrift.protocol.TType.I32)
							{
								struct.num2 = iprot.readI32();
								struct.setNum2IsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Add_args struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(NUM1_FIELD_DESC);
				oprot.writeI32(struct.num1);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(NUM2_FIELD_DESC);
				oprot.writeI32(struct.num2);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Add_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Add_argsTupleScheme getScheme()
			{
				return new Add_argsTupleScheme();
			}
		}

		private static class Add_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Add_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Add_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetNum1())
				{
					optionals.set(0);
				}
				if (struct.isSetNum2())
				{
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetNum1())
				{
					oprot.writeI32(struct.num1);
				}
				if (struct.isSetNum2())
				{
					oprot.writeI32(struct.num2);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Add_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0))
				{
					struct.num1 = iprot.readI32();
					struct.setNum1IsSet(true);
				}
				if (incoming.get(1))
				{
					struct.num2 = iprot.readI32();
					struct.setNum2IsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
		{
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class Add_result implements org.apache.thrift.TBase<Add_result, Add_result._Fields>, java.io.Serializable, Cloneable, Comparable<Add_result>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Add_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Add_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Add_resultTupleSchemeFactory();

		public int success; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static
			{
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public java.lang.String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static
		{
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Add_result.class, metaDataMap);
		}

		public Add_result()
		{
		}

		public Add_result(
			int success)
		{
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Add_result(Add_result other)
		{
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public Add_result deepCopy()
		{
			return new Add_result(this);
		}

		@Override
		public void clear()
		{
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess()
		{
			return this.success;
		}

		public Add_result setSuccess(int success)
		{
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess()
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess()
		{
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value)
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value)
		{
			switch (field)
			{
				case SUCCESS:
					if (value == null)
					{
						unsetSuccess();
					} else
					{
						setSuccess((java.lang.Integer) value);
					}
					break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field)
		{
			switch (field)
			{
				case SUCCESS:
					return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new java.lang.IllegalArgumentException();
			}

			switch (field)
			{
				case SUCCESS:
					return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that)
		{
			if (that == null)
				return false;
			if (that instanceof Add_result)
				return this.equals((Add_result) that);
			return false;
		}

		public boolean equals(Add_result that)
		{
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success)
			{
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			int hashCode = 1;

			hashCode = hashCode * 8191 + success;

			return hashCode;
		}

		@Override
		public int compareTo(Add_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSuccess())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
		{
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
		{
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString()
		{
			java.lang.StringBuilder sb = new java.lang.StringBuilder("Add_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
		{
			try
			{
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class Add_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Add_resultStandardScheme getScheme()
			{
				return new Add_resultStandardScheme();
			}
		}

		private static class Add_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Add_result>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot, Add_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.I32)
							{
								struct.success = iprot.readI32();
								struct.setSuccessIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Add_result struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess())
				{
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Add_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Add_resultTupleScheme getScheme()
			{
				return new Add_resultTupleScheme();
			}
		}

		private static class Add_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Add_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Add_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess())
				{
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess())
				{
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Add_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0))
				{
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
		{
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class Calculate_args implements org.apache.thrift.TBase<Calculate_args, Calculate_args._Fields>, java.io.Serializable, Cloneable, Comparable<Calculate_args>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Calculate_args");

		private static final org.apache.thrift.protocol.TField LOGID_FIELD_DESC = new org.apache.thrift.protocol.TField("logid", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField W_FIELD_DESC = new org.apache.thrift.protocol.TField("w", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Calculate_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Calculate_argsTupleSchemeFactory();

		public int logid; // required
		public Work w; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			LOGID((short) 1, "logid"),
			W((short) 2, "w");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static
			{
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					case 1: // LOGID
						return LOGID;
					case 2: // W
						return W;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public java.lang.String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LOGID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static
		{
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOGID, new org.apache.thrift.meta_data.FieldMetaData("logid", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
			tmpMap.put(_Fields.W, new org.apache.thrift.meta_data.FieldMetaData("w", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Work.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Calculate_args.class, metaDataMap);
		}

		public Calculate_args()
		{
		}

		public Calculate_args(
			int logid,
			Work w)
		{
			this();
			this.logid = logid;
			setLogidIsSet(true);
			this.w = w;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Calculate_args(Calculate_args other)
		{
			__isset_bitfield = other.__isset_bitfield;
			this.logid = other.logid;
			if (other.isSetW())
			{
				this.w = new Work(other.w);
			}
		}

		public Calculate_args deepCopy()
		{
			return new Calculate_args(this);
		}

		@Override
		public void clear()
		{
			setLogidIsSet(false);
			this.logid = 0;
			this.w = null;
		}

		public int getLogid()
		{
			return this.logid;
		}

		public Calculate_args setLogid(int logid)
		{
			this.logid = logid;
			setLogidIsSet(true);
			return this;
		}

		public void unsetLogid()
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGID_ISSET_ID);
		}

		/** Returns true if field logid is set (has been assigned a value) and false otherwise */
		public boolean isSetLogid()
		{
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGID_ISSET_ID);
		}

		public void setLogidIsSet(boolean value)
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGID_ISSET_ID, value);
		}

		public Work getW()
		{
			return this.w;
		}

		public Calculate_args setW(Work w)
		{
			this.w = w;
			return this;
		}

		public void unsetW()
		{
			this.w = null;
		}

		/** Returns true if field w is set (has been assigned a value) and false otherwise */
		public boolean isSetW()
		{
			return this.w != null;
		}

		public void setWIsSet(boolean value)
		{
			if (!value)
			{
				this.w = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value)
		{
			switch (field)
			{
				case LOGID:
					if (value == null)
					{
						unsetLogid();
					} else
					{
						setLogid((java.lang.Integer) value);
					}
					break;

				case W:
					if (value == null)
					{
						unsetW();
					} else
					{
						setW((Work) value);
					}
					break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field)
		{
			switch (field)
			{
				case LOGID:
					return getLogid();

				case W:
					return getW();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new java.lang.IllegalArgumentException();
			}

			switch (field)
			{
				case LOGID:
					return isSetLogid();
				case W:
					return isSetW();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that)
		{
			if (that == null)
				return false;
			if (that instanceof Calculate_args)
				return this.equals((Calculate_args) that);
			return false;
		}

		public boolean equals(Calculate_args that)
		{
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_logid = true;
			boolean that_present_logid = true;
			if (this_present_logid || that_present_logid)
			{
				if (!(this_present_logid && that_present_logid))
					return false;
				if (this.logid != that.logid)
					return false;
			}

			boolean this_present_w = true && this.isSetW();
			boolean that_present_w = true && that.isSetW();
			if (this_present_w || that_present_w)
			{
				if (!(this_present_w && that_present_w))
					return false;
				if (!this.w.equals(that.w))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			int hashCode = 1;

			hashCode = hashCode * 8191 + logid;

			hashCode = hashCode * 8191 + ((isSetW()) ? 131071 : 524287);
			if (isSetW())
				hashCode = hashCode * 8191 + w.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(Calculate_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetLogid()).compareTo(other.isSetLogid());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetLogid())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logid, other.logid);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetW()).compareTo(other.isSetW());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetW())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.w, other.w);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
		{
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
		{
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString()
		{
			java.lang.StringBuilder sb = new java.lang.StringBuilder("Calculate_args(");
			boolean first = true;

			sb.append("logid:");
			sb.append(this.logid);
			first = false;
			if (!first) sb.append(", ");
			sb.append("w:");
			if (this.w == null)
			{
				sb.append("null");
			} else
			{
				sb.append(this.w);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
			if (w != null)
			{
				w.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
		{
			try
			{
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class Calculate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Calculate_argsStandardScheme getScheme()
			{
				return new Calculate_argsStandardScheme();
			}
		}

		private static class Calculate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Calculate_args>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot, Calculate_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						case 1: // LOGID
							if (schemeField.type == org.apache.thrift.protocol.TType.I32)
							{
								struct.logid = iprot.readI32();
								struct.setLogidIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // W
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
							{
								struct.w = new Work();
								struct.w.read(iprot);
								struct.setWIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Calculate_args struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(LOGID_FIELD_DESC);
				oprot.writeI32(struct.logid);
				oprot.writeFieldEnd();
				if (struct.w != null)
				{
					oprot.writeFieldBegin(W_FIELD_DESC);
					struct.w.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Calculate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Calculate_argsTupleScheme getScheme()
			{
				return new Calculate_argsTupleScheme();
			}
		}

		private static class Calculate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Calculate_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Calculate_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetLogid())
				{
					optionals.set(0);
				}
				if (struct.isSetW())
				{
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetLogid())
				{
					oprot.writeI32(struct.logid);
				}
				if (struct.isSetW())
				{
					struct.w.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Calculate_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0))
				{
					struct.logid = iprot.readI32();
					struct.setLogidIsSet(true);
				}
				if (incoming.get(1))
				{
					struct.w = new Work();
					struct.w.read(iprot);
					struct.setWIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
		{
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class Calculate_result implements org.apache.thrift.TBase<Calculate_result, Calculate_result._Fields>, java.io.Serializable, Cloneable, Comparable<Calculate_result>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Calculate_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
		private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Calculate_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Calculate_resultTupleSchemeFactory();

		public int success; // required
		public InvalidOperation ouch; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS((short) 0, "success"),
			OUCH((short) 1, "ouch");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static
			{
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					case 0: // SUCCESS
						return SUCCESS;
					case 1: // OUCH
						return OUCH;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public java.lang.String getFieldName()
			{
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static
		{
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
			tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidOperation.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Calculate_result.class, metaDataMap);
		}

		public Calculate_result()
		{
		}

		public Calculate_result(
			int success,
			InvalidOperation ouch)
		{
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.ouch = ouch;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Calculate_result(Calculate_result other)
		{
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetOuch())
			{
				this.ouch = new InvalidOperation(other.ouch);
			}
		}

		public Calculate_result deepCopy()
		{
			return new Calculate_result(this);
		}

		@Override
		public void clear()
		{
			setSuccessIsSet(false);
			this.success = 0;
			this.ouch = null;
		}

		public int getSuccess()
		{
			return this.success;
		}

		public Calculate_result setSuccess(int success)
		{
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess()
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess()
		{
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value)
		{
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public InvalidOperation getOuch()
		{
			return this.ouch;
		}

		public Calculate_result setOuch(InvalidOperation ouch)
		{
			this.ouch = ouch;
			return this;
		}

		public void unsetOuch()
		{
			this.ouch = null;
		}

		/** Returns true if field ouch is set (has been assigned a value) and false otherwise */
		public boolean isSetOuch()
		{
			return this.ouch != null;
		}

		public void setOuchIsSet(boolean value)
		{
			if (!value)
			{
				this.ouch = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value)
		{
			switch (field)
			{
				case SUCCESS:
					if (value == null)
					{
						unsetSuccess();
					} else
					{
						setSuccess((java.lang.Integer) value);
					}
					break;

				case OUCH:
					if (value == null)
					{
						unsetOuch();
					} else
					{
						setOuch((InvalidOperation) value);
					}
					break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field)
		{
			switch (field)
			{
				case SUCCESS:
					return getSuccess();

				case OUCH:
					return getOuch();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new java.lang.IllegalArgumentException();
			}

			switch (field)
			{
				case SUCCESS:
					return isSetSuccess();
				case OUCH:
					return isSetOuch();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that)
		{
			if (that == null)
				return false;
			if (that instanceof Calculate_result)
				return this.equals((Calculate_result) that);
			return false;
		}

		public boolean equals(Calculate_result that)
		{
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success)
			{
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_ouch = true && this.isSetOuch();
			boolean that_present_ouch = true && that.isSetOuch();
			if (this_present_ouch || that_present_ouch)
			{
				if (!(this_present_ouch && that_present_ouch))
					return false;
				if (!this.ouch.equals(that.ouch))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode()
		{
			int hashCode = 1;

			hashCode = hashCode * 8191 + success;

			hashCode = hashCode * 8191 + ((isSetOuch()) ? 131071 : 524287);
			if (isSetOuch())
				hashCode = hashCode * 8191 + ouch.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(Calculate_result other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetSuccess())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
			if (lastComparison != 0)
			{
				return lastComparison;
			}
			if (isSetOuch())
			{
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
				if (lastComparison != 0)
				{
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
		{
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
		{
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString()
		{
			java.lang.StringBuilder sb = new java.lang.StringBuilder("Calculate_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first) sb.append(", ");
			sb.append("ouch:");
			if (this.ouch == null)
			{
				sb.append("null");
			} else
			{
				sb.append(this.ouch);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
		{
			try
			{
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class Calculate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Calculate_resultStandardScheme getScheme()
			{
				return new Calculate_resultStandardScheme();
			}
		}

		private static class Calculate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Calculate_result>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot, Calculate_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.I32)
							{
								struct.success = iprot.readI32();
								struct.setSuccessIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 1: // OUCH
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
							{
								struct.ouch = new InvalidOperation();
								struct.ouch.read(iprot);
								struct.setOuchIsSet(true);
							} else
							{
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Calculate_result struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess())
				{
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.ouch != null)
				{
					oprot.writeFieldBegin(OUCH_FIELD_DESC);
					struct.ouch.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Calculate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Calculate_resultTupleScheme getScheme()
			{
				return new Calculate_resultTupleScheme();
			}
		}

		private static class Calculate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Calculate_result>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Calculate_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess())
				{
					optionals.set(0);
				}
				if (struct.isSetOuch())
				{
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess())
				{
					oprot.writeI32(struct.success);
				}
				if (struct.isSetOuch())
				{
					struct.ouch.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Calculate_result struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0))
				{
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1))
				{
					struct.ouch = new InvalidOperation();
					struct.ouch.read(iprot);
					struct.setOuchIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
		{
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class Zip_args implements org.apache.thrift.TBase<Zip_args, Zip_args._Fields>, java.io.Serializable, Cloneable, Comparable<Zip_args>
	{
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Zip_args");


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Zip_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Zip_argsTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static
			{
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class))
				{
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId)
			{
				switch (fieldId)
				{
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId)
			{
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name)
			{
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName)
			{
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId()
			{
				return _thriftId;
			}

			public java.lang.String getFieldName()
			{
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static
		{
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Zip_args.class, metaDataMap);
		}

		public Zip_args()
		{
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Zip_args(Zip_args other)
		{
		}

		public Zip_args deepCopy()
		{
			return new Zip_args(this);
		}

		@Override
		public void clear()
		{
		}

		public void setFieldValue(_Fields field, java.lang.Object value)
		{
			switch (field)
			{
			}
		}

		public java.lang.Object getFieldValue(_Fields field)
		{
			switch (field)
			{
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field)
		{
			if (field == null)
			{
				throw new java.lang.IllegalArgumentException();
			}

			switch (field)
			{
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that)
		{
			if (that == null)
				return false;
			if (that instanceof Zip_args)
				return this.equals((Zip_args) that);
			return false;
		}

		public boolean equals(Zip_args that)
		{
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode()
		{
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(Zip_args other)
		{
			if (!getClass().equals(other.getClass()))
			{
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId)
		{
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
		{
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
		{
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString()
		{
			java.lang.StringBuilder sb = new java.lang.StringBuilder("Zip_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException
		{
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
		{
			try
			{
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
		{
			try
			{
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te)
			{
				throw new java.io.IOException(te);
			}
		}

		private static class Zip_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Zip_argsStandardScheme getScheme()
			{
				return new Zip_argsStandardScheme();
			}
		}

		private static class Zip_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Zip_args>
		{

			public void read(org.apache.thrift.protocol.TProtocol iprot, Zip_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
					{
						break;
					}
					switch (schemeField.id)
					{
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Zip_args struct) throws org.apache.thrift.TException
			{
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Zip_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory
		{
			public Zip_argsTupleScheme getScheme()
			{
				return new Zip_argsTupleScheme();
			}
		}

		private static class Zip_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Zip_args>
		{

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Zip_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Zip_args struct) throws org.apache.thrift.TException
			{
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto)
		{
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

}
